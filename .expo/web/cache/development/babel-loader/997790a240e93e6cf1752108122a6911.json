{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useStarte } from 'expo-status-bar';\nimport { useState } from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { TouchableOpacityBase } from \"react-native-web/dist/index\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Task from \"./components/Task\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(),\n      task = _useState.task,\n      setTask = _useState.setTask;\n\n  var _useState2 = useState([]),\n      _useState3 = _slicedToArray(_useState2, 2),\n      taskItems = _useState3[0],\n      setTaskItems = _useState3[1];\n\n  var hanleAddTask = function hanleAddTask() {\n    Keyboard.dismiss();\n    setTaskItems([].concat(_toConsumableArray(taskItems), [task]));\n    setTask(null);\n  };\n\n  var comleteTask = function comleteTask(index) {\n    var itemsCopy = _toConsumableArray(taskItems);\n\n    itemsCopy.splice(index, 1);\n    setTaskItems(intemsCopy);\n  };\n\n  return _jsxs(View, {\n    styles: styles.container,\n    children: [_jsxs(View, {\n      style: styles.tasksWrapper,\n      children: [_jsx(Text, {\n        style: styles.sectionTitle,\n        children: \"Today's tasks\"\n      }), _jsx(View, {\n        style: styles.items,\n        children: taskItems.map(function (item, index) {\n          return _jsx(TouchableOpacity, {\n            Key: index,\n            onPress: function onPress() {\n              return completeTask(index);\n            },\n            children: _jsx(Task, {\n              text: item\n            })\n          });\n        })\n      })]\n    }), _jsxs(KeyboardAvoidingView, {\n      behavior: Platform.OS === \"IOS\" ? \"padding\" : \"height\",\n      style: styles.writeTaskWrapper,\n      children: [_jsx(TextInpunt, {\n        style: styles.input,\n        placeholder: 'Write a task',\n        value: task,\n        onChagerText: function onChagerText(text) {\n          return setTask(text);\n        }\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return handleAddTask();\n        },\n        children: _jsx(View, {\n          style: styles.addWrapper,\n          children: _jsx(Text, {\n            style: styles.addText,\n            children: \"+\"\n          })\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#E8EAED'\n  },\n  tasksWrapper: {\n    paddingTop: 80,\n    paddingHorizontal: 20\n  },\n  sectionTitle: {},\n  items: {\n    marginTop: 30\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 60,\n    whdth: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center'\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n    whdth: 250\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#C0C0C0',\n    borderWidth: 1,\n    whdth: 250\n  },\n  addText: {\n    width: 60,\n    height: 60,\n    backgroundColor: 'center',\n    borderRadius: 60,\n    justifyContent: ' center',\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1\n  }\n});","map":{"version":3,"names":["React","useStarte","useState","TouchableOpacityBase","Task","App","task","setTask","taskItems","setTaskItems","hanleAddTask","Keyboard","dismiss","comleteTask","index","itemsCopy","splice","intemsCopy","styles","container","tasksWrapper","sectionTitle","items","map","item","completeTask","Platform","OS","writeTaskWrapper","input","text","handleAddTask","addWrapper","addText","StyleSheet","create","flex","backgroundColor","paddingTop","paddingHorizontal","marginTop","position","bottom","whdth","flexDirection","justifyContent","alignItems","paddingVertical","borderRadius","borderColor","borderWidth","width","height"],"sources":["C:/Users/202002553741/Documents/projeto/React-native/App.js"],"sourcesContent":["import React, { useStarte } from 'expo-status-bar';\r\nimport {useState} from 'react'\r\n\r\nimport { Keyboard, KeyboardAvoidingView, StyleSheet, Text, TouchableOpacity, TouchableOpacityBase, View, Platform } from 'react-native';\r\nimport Task from './components/Task';\r\n\r\nexport default function App() {\r\n  const { task, setTask } = useState();\r\n  const [taskItems, setTaskItems] = useState([]);\r\n\r\n  const hanleAddTask = () => {\r\n    Keyboard.dismiss();\r\n    setTaskItems([...taskItems, task])\r\n    setTask(null);\r\n  }\r\n\r\n  const comleteTask = (index) => {\r\n    let itemsCopy = [...taskItems];\r\n    itemsCopy.splice(index, 1);\r\n    setTaskItems(intemsCopy);\r\n  }\r\n\r\n  return (\r\n    <View styles={styles.container}>\r\n\r\n      {/*Today's Tasks */}\r\n      <View style={styles.tasksWrapper}>\r\n        <Text style={styles.sectionTitle}>Today's tasks</Text>\r\n\r\n        <View style={styles.items}>\r\n          {/* This is where the tasks will go! */}\r\n          {\r\n            taskItems.map((item, index) => {\r\n              return (\r\n                <TouchableOpacity Key={index} onPress={() => completeTask(index)}>\r\n                  <Task text={item} />\r\n                </TouchableOpacity>\r\n              )\r\n            })\r\n          }\r\n        </View>\r\n\r\n      </View>\r\n    {/* Write a task*/}\r\n      <KeyboardAvoidingView\r\n        behavior={Platform.OS === \"IOS\" ? \"padding\" : \"height\"}\r\n        style={styles.writeTaskWrapper}\r\n      >\r\n        <TextInpunt style={styles.input} placeholder={'Write a task'} value={task} onChagerText={text => setTask(text)} />\r\n\r\n        <TouchableOpacity onPress={() => handleAddTask()}>\r\n          <View style={styles.addWrapper}>\r\n            <Text style={styles.addText}>+</Text>\r\n          </View>\r\n        </TouchableOpacity>\r\n      </KeyboardAvoidingView>\r\n    </View>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#E8EAED',\r\n  },\r\n\r\n  tasksWrapper: {\r\n    paddingTop: 80,\r\n    paddingHorizontal: 20,\r\n  },\r\n  sectionTitle: {},\r\n  items: {\r\n    marginTop: 30,\r\n  },\r\n  writeTaskWrapper: {\r\n    position: 'absolute',\r\n    bottom: 60,\r\n    whdth: '100%',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center'\r\n  },\r\n  input: {\r\n    paddingVertical: 15,\r\n    paddingHorizontal: 15,\r\n    backgroundColor: '#FFF',\r\n    borderRadius: 60,\r\n    borderColor: '#C0C0C0',\r\n    borderWidth: 1,\r\n    whdth: 250,\r\n  },\r\n  addWrapper: {\r\n    width: 60,\r\n    height: 60,\r\n    backgroundColor: '#C0C0C0',\r\n    borderWidth: 1,\r\n    whdth: 250,\r\n\r\n  },\r\n  addText: {\r\n    width: 60,\r\n    height: 60,\r\n    backgroundColor: 'center',\r\n    borderRadius: 60,\r\n    justifyContent: ' center',\r\n    alignItems: 'center',\r\n    borderColor: '#C0C0C0',\r\n    borderWidth: 1,\r\n\r\n\r\n  },\r\n\r\n})\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}